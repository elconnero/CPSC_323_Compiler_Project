<Rat25S> -> $$ <Opt Declaration List> $$ <Statement List> $$
Matched: Token: SEPARATOR, Lexeme: $$
<Opt Declaration List> -> <Declaration List> | epsilon
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean
Matched: Token: KEYWORD, Lexeme: integer
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: a
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: b
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: c
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: d
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: e
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: f
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: result
<IDs Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Declaration List Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: $$
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: a
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 10
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: b
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 5
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: c
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 2
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: d
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 8
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: e
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 3
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: f
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 4
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: result
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: a
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: +
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: b
<Primary Prime> -> epsilon
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: *
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: c
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: result
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: d
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: -
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: e
<Primary Prime> -> epsilon
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: *
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: f
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: result
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: a
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: +
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: b
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: *
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: c
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: +
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: d
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: result
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: a
<Primary Prime> -> epsilon
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: *
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: b
<Primary Prime> -> epsilon
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: /
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: c
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: $$
; === Assembly Listing ===
0001: PUSHI 10
0002: POPM 5000
0003: PUSHI 5
0004: POPM 5001
0005: PUSHI 2
0006: POPM 5002
0007: PUSHI 8
0008: POPM 5003
0009: PUSHI 3
0010: POPM 5004
0011: PUSHI 4
0012: POPM 5005
0013: PUSHM 5000
0014: PUSHM 5001
0015: PUSHM 5002
0016: M
0017: A
0018: POPM 5006
0019: PUSHM 5003
0020: PUSHM 5004
0021: PUSHM 5005
0022: M
0023: S
0024: POPM 5006
0025: PUSHM 5000
0026: PUSHM 5001
0027: A
0028: PUSHM 5002
0029: PUSHM 5003
0030: A
0031: M
0032: POPM 5006
0033: PUSHM 5000
0034: PUSHM 5001
0035: M
0036: PUSHM 5002
0037: D
0038: POPM 5006
; === End of Listing ===

Symbol Table
Identifier MemoryLocation Type
a 5000 integer
b 5001 integer
c 5002 integer
d 5003 integer
e 5004 integer
f 5005 integer
result 5006 integer
