Token		Lexeme
SEPARATOR 	$$
KEYWORD   	function
Identifier	convert
SEPARATOR 	(
Identifier	fahr
KEYWORD   	integer
SEPARATOR 	)
SEPARATOR 	{
KEYWORD   	return
Integer   	5
OPERATOR  	*
SEPARATOR 	(
Identifier	fahr
OPERATOR  	-
Integer   	32
SEPARATOR 	)
OPERATOR  	/
Integer   	9
SEPARATOR 	;
SEPARATOR 	}
KEYWORD   	function
Identifier	convertx
SEPARATOR 	(
Identifier	x
KEYWORD   	real
SEPARATOR 	,
Identifier	y
KEYWORD   	boolean
SEPARATOR 	)
KEYWORD   	boolean
Identifier	k
SEPARATOR 	,
Identifier	z
SEPARATOR 	;
KEYWORD   	real
Identifier	x
SEPARATOR 	;
SEPARATOR 	{
KEYWORD   	if
SEPARATOR 	(
Identifier	x
OPERATOR  	>
Identifier	y
SEPARATOR 	)
Identifier	x
OPERATOR  	=
Integer   	1
SEPARATOR 	;
KEYWORD   	endif
KEYWORD   	if
SEPARATOR 	(
Identifier	y
OPERATOR  	!=
Identifier	z
SEPARATOR 	)
Identifier	x
OPERATOR  	=
Integer   	5
SEPARATOR 	;
KEYWORD   	else
Identifier	y
OPERATOR  	=
Integer   	123
SEPARATOR 	.
Integer   	45
SEPARATOR 	;
KEYWORD   	endif
KEYWORD   	return
SEPARATOR 	;
SEPARATOR 	}
SEPARATOR 	$$
KEYWORD   	integer
Identifier	low
SEPARATOR 	,
Identifier	high
SEPARATOR 	,
Identifier	step
SEPARATOR 	;
SEPARATOR 	$$
KEYWORD   	scan
SEPARATOR 	(
Identifier	low
SEPARATOR 	,
Identifier	high
SEPARATOR 	,
Identifier	step
SEPARATOR 	)
SEPARATOR 	;
KEYWORD   	while
SEPARATOR 	(
Identifier	low
OPERATOR  	<=
Identifier	high
SEPARATOR 	)
SEPARATOR 	{
KEYWORD   	print
SEPARATOR 	(
Identifier	convertx
SEPARATOR 	(
Identifier	low
SEPARATOR 	)
SEPARATOR 	)
SEPARATOR 	;
Identifier	low
OPERATOR  	=
Identifier	low
OPERATOR  	+
Identifier	step
SEPARATOR 	;
SEPARATOR 	}
KEYWORD   	endwhile
SEPARATOR 	$$
