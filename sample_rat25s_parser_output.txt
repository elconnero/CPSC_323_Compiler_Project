<Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List> $$
Matched: Token: SEPARATOR, Lexeme: $$
<Opt Function Definitions> -> <Function Definitions> | ε
<Function Definitions> -> <Function> <Function Definitions Prime>
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Matched: Token: KEYWORD, Lexeme: function
Matched: Token: Identifier, Lexeme: convertx
Matched: Token: SEPARATOR, Lexeme: (
<Opt Parameter List> -> <Parameter List> | ε
<Parameter List> -> <Parameter> <Parameter List Prime>
<Parameter> -> <Identifier> <Qualifier>
Matched: Token: Identifier, Lexeme: fahr
<Qualifier> -> integer | boolean | real
Matched: Token: KEYWORD, Lexeme: integer
<Parameter List Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: )
<Opt Declaration List> -> <Declaration List> | ε
<Opt Declaration List> -> ε
<Body> -> { <Statement List> }
Matched: Token: SEPARATOR, Lexeme: {
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Return> -> return <Expression> ;
Matched: Token: KEYWORD, Lexeme: return
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: 5
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime> | % <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: *
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: fahr
<Term Prime> -> ε
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: -
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: 32
<Term Prime> -> ε
<Expression Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: )
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime> | % <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: /
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: 9
<Term Prime> -> ε
<Expression Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: }
<Function Definitions Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: $$
<Opt Declaration List> -> <Declaration List> | ε
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean | real
Matched: Token: KEYWORD, Lexeme: integer
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: low
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: high
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: step
<IDs Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: ;
<Declaration List Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: $$
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Scan> -> scan ( <IDs> ) ;
Matched: Token: KEYWORD, Lexeme: scan
Matched: Token: SEPARATOR, Lexeme: (
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: low
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: high
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: step
<IDs Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<While> -> while ( <Condition> ) <Statement> endwhile
Matched: Token: KEYWORD, Lexeme: while
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: low
<Term Prime> -> ε
<Expression Prime> -> ε
<Relop> -> == | != | > | < | <= | =>
Matched: Token: OPERATOR, Lexeme: <=
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: high
<Term Prime> -> ε
<Expression Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Statement> -> <Block>
<Body> -> { <Statement List> }
Matched: Token: SEPARATOR, Lexeme: {
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <IDs> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: low
<IDs Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <IDs> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: convertx
<IDs Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: low
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: low
<Term Prime> -> ε
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: +
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: step
<Term Prime> -> ε
<Expression Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: }
Matched: Token: KEYWORD, Lexeme: endwhile
<Statement List Prime> -> ε
Matched: Token: SEPARATOR, Lexeme: $$
