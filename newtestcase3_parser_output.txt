<Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List> $$
Matched: Token: SEPARATOR, Lexeme: $$
<Opt Function Definitions> -> <Function Definitions> | epsilon
<Opt Function Definitions> -> epsilon
Matched: Token: SEPARATOR, Lexeme: $$
<Opt Declaration List> -> <Declaration List> | epsilon
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean
Matched: Token: KEYWORD, Lexeme: integer
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: x
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: y
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: sum
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: diff
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: prod
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: quot
<IDs Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Declaration List Prime> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean
Matched: Token: KEYWORD, Lexeme: integer
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: gt
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: lt
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: eq
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: neq
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: ge
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: le
<IDs Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Declaration List Prime> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean
Matched: Token: KEYWORD, Lexeme: integer
<IDs> -> <Identifier> <IDs Prime>
Matched: Token: Identifier, Lexeme: i
<IDs Prime> -> , <Identifier> <IDs Prime>
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: loopSum
<IDs Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Declaration List Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: $$
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Scan> -> scan ( <IDs> ) ;
Matched: Token: KEYWORD, Lexeme: scan
Matched: Token: SEPARATOR, Lexeme: (
Matched: Token: Identifier, Lexeme: x
Matched: Token: SEPARATOR, Lexeme: ,
Matched: Token: Identifier, Lexeme: y
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: sum
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: +
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: sum
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: diff
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: -
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: diff
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: prod
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: *
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: prod
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: quot
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
Matched: Token: OPERATOR, Lexeme: /
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: quot
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: gt
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: if
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: >
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: gt
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: endif
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: gt
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: lt
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: if
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: <
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: lt
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: endif
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: lt
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: eq
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: if
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: ==
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: eq
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: endif
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: eq
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: neq
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: if
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: !=
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: neq
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: endif
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: neq
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: ge
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: if
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: >=
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: ge
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: endif
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: ge
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: le
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: if
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: x
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: <=
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: y
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: le
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<If> -> if ( <Condition> ) <Statement> endif
Matched: Token: KEYWORD, Lexeme: endif
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: le
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: i
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 5
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: loopSum
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<While> -> while ( <Condition> ) <Statement> endwhile
Matched: Token: KEYWORD, Lexeme: while
Matched: Token: SEPARATOR, Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: i
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
<Relop> -> == | != | > | < | <= | >= 
Matched: Token: OPERATOR, Lexeme: >
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 0
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Statement> -> <Block>
<Body> -> { <Statement List> }
Matched: Token: SEPARATOR, Lexeme: {
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: loopSum
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: loopSum
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: +
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: i
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Assign> -> <Identifier> = <Expression> ;
Matched: Token: Identifier, Lexeme: i
Matched: Token: OPERATOR, Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: i
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> + <Term> <Expression Prime> | - <Term> <Expression Prime>
Matched: Token: OPERATOR, Lexeme: -
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Integer, Lexeme: 1
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: }
Matched: Token: KEYWORD, Lexeme: endwhile
<Statement List Prime> -> <Statement> <Statement List Prime>
<Statement> -> <Assign> | <If> | <While> | <Return> | <Scan> | <Print> | <Block>
<Print> -> print ( <Expression> ) ;
Matched: Token: KEYWORD, Lexeme: print
Matched: Token: SEPARATOR, Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | <Real> | ( <Expression> )
Matched: Token: Identifier, Lexeme: loopSum
<Primary Prime> -> epsilon
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: )
Matched: Token: SEPARATOR, Lexeme: ;
<Statement List Prime> -> epsilon
Matched: Token: SEPARATOR, Lexeme: $$
1 SIN
2 POPM 5000
3 SIN
4 POPM 5001
5 PUSHM 5000
6 PUSHM 5001
7 A
8 POPM 5002
9 PUSHM 5002
10 SOUT
11 PUSHM 5000
12 PUSHM 5001
13 S
14 POPM 5003
15 PUSHM 5003
16 SOUT
17 PUSHM 5000
18 PUSHM 5001
19 M
20 POPM 5004
21 PUSHM 5004
22 SOUT
23 PUSHM 5000
24 PUSHM 5001
25 D
26 POPM 5005
27 PUSHM 5005
28 SOUT
29 PUSHI 0
30 POPM 5006
31 PUSHM 5000
32 GRT
33 PUSHM 5001
34 PUSHI 1
35 POPM 5006
36 PUSHM 5006
37 SOUT
38 PUSHI 0
39 POPM 5007
40 PUSHM 5000
41 LES
42 PUSHM 5001
43 PUSHI 1
44 POPM 5007
45 PUSHM 5007
46 SOUT
47 PUSHI 0
48 POPM 5008
49 PUSHM 5000
50 EQ
51 PUSHM 5001
52 PUSHI 1
53 POPM 5008
54 PUSHM 5008
55 SOUT
56 PUSHI 0
57 POPM 5009
58 PUSHM 5000
59 NEQ
60 PUSHM 5001
61 PUSHI 1
62 POPM 5009
63 PUSHM 5009
64 SOUT
65 PUSHI 0
66 POPM 5010
67 PUSHM 5000
68 GEQ
69 PUSHM 5001
70 PUSHI 1
71 POPM 5010
72 PUSHM 5010
73 SOUT
74 PUSHI 0
75 POPM 5011
76 PUSHM 5000
77 LEQ
78 PUSHM 5001
79 PUSHI 1
80 POPM 5011
81 PUSHM 5011
82 SOUT
83 PUSHI 5
84 POPM 5012
85 PUSHI 0
86 POPM 5013
88 PUSHM 5012
89 GRT
90 PUSHI 0
91 JMP0 91
92 PUSHM 5013
93 PUSHM 5012
94 A
95 POPM 5013
96 PUSHM 5012
97 PUSHI 1
98 S
99 POPM 5012
100 JMP 87
102 PUSHM 5013
103 SOUT

Symbol Table
Identifier MemoryLocation Type
diff 5003 integer
eq 5008 integer
ge 5010 integer
gt 5006 integer
i 5012 integer
le 5011 integer
loopSum 5013 integer
lt 5007 integer
neq 5009 integer
prod 5004 integer
quot 5005 integer
sum 5002 integer
x 5000 integer
y 5001 integer
